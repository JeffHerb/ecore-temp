// Menu wrapper
#{$menujs-namespace} {
    @include clearfix;

    display: table;
    width: 100%;

    font-family: $menujs-font-family;
    font-size: $menujs-font-size;
    min-height: $menujs-menu-height;
    line-height: $menujs-menu-height;
    z-index: $menujs-zindex-base;

    @if $menujs-allow-user-text-selection == false {
        @include user-select();
    }

    &,
    & * {
        @include box-sizing;
    }

    &.#{$menujs-vendor}-fixed-width,
    &.#{$menujs-vendor}-natural-width {
        display: block;
    }

    // Remove bullets and margins from all list items
    &,
    ul {
        @include menujs-list-no-outer-padding();
    }

    li {
        list-style: none outside none;
    }
}

// Items (all levels)
#{$menujs-namespace} .#{$menujs-vendor}-item {
    border: $menujs-item-border;
    border-bottom: none;
    color: $menujs-item-text-color;
    background-color: $menujs-item-bg-color;

    // Needed to overcome a Safari bug and force it to recognize `click` event listeners
    // http://www.quirksmode.org/blog/archives/2010/10/click_event_del_1.html
    cursor: pointer;

    // Label links
    & > div > a {
        display: block;
        position: relative;
        padding: $menujs-item-padding;
        line-height: $menujs-line-height;
        color: $menujs-item-text-color;
        font-weight: $menujs-item-font-weight;
        text-decoration: $menujs-link-text-decoration;
        @include menujs-transition("background-color #{$menujs-item-transition-duration} #{$menujs-item-transition-function}, color #{$menujs-item-transition-duration} #{$menujs-item-transition-function}");

        // It's important to put all `:hover` styles on these links and not the `<li>` because technically all sub-groups are part of the `<li>` and moving the mouse on/off a low-level item would affect the styles of the parent item(s)
        &:hover {
            color: $menujs-item-text-color-hover;
            background-color: $menujs-item-bg-color-hover;
            text-decoration: $menujs-link-hover-text-decoration;
        }

        &:focus {
            outline: none;
            color: $menujs-item-text-color-focus;
            background-color: $menujs-item-bg-color-focus;
            text-decoration: $menujs-link-focus-text-decoration;
        }
    }

    &.#{$menujs-vendor}-item-disabled {
        &,
        & > div > a {
            &,
            &:hover {
                font-style: $menujs-item-disabled-style;
                color: $menujs-item-disabled-color;
                background-color: $menujs-item-disabled-bg-color;
                cursor: $menujs-item-disabled-cursor;
            }

            &:hover {
                text-decoration: $menujs-item-disabled-hover-text-decoration;
            }
        }
    }

    &.#{$menujs-vendor}-item-filler {
        &,
        & > div > a {
            &,
            &:hover {
                // Keep the same style on hover to show it's not active
                color: $menujs-item-filler-color;
                background-color: $menujs-item-filler-bg-color;
                cursor: $menujs-item-filler-cursor;
            }
        }

        & > div > a:hover {
            // background-color: $menujs-item-filler-bg-color;
            // overflow: hidden;
        }
    }

    &:last-child {
        border-bottom: $menujs-item-border;
    }

    // Links
    &.#{$menujs-vendor}-has-group > div > a {
        text-decoration: $menujs-group-link-text-decoration;

        &:hover {
            color: $menujs-item-text-color-hover;
            background-color: $menujs-item-bg-color-hover;
            text-decoration: $menujs-group-link-text-decoration-hover;
        }

        // Icons
        & > i {
            display: block;
            position: absolute;

            // Default position; it's vertically aligned for item whose text doesn't wrap:
            top: $menujs-item-padding-top;
            @if $menujs-use-group-triangle == true {
                // Better position: it's vertically aligned even if the item text wraps:
                top: calc(50% - #{$menujs-icon-triangle-size});
                right: $menujs-icon-triangle-size;
            }
            @else {
                // Make sure the icon isn't too close to the label when the padding is large
                @if $menujs-item-padding-right >= 16px {
                    right: ($menujs-item-padding-right - 8px);
                }
                @else {
                    right: $menujs-item-padding-right;
                }
            }

            width: $menujs-icon-width;
            height: $menujs-icon-height;
            text-indent: 1000em;
            overflow: hidden;
            speak: none;

            // Background -- start with a transparent, image-less definition, then add an image if applicable
            background: transparent none no-repeat 0 0;

            // Only define a separate hover image if one was supplied
            @if $menujs-use-group-triangle == true {
                @include triangle("right", $menujs-icon-triangle-size, $menujs-icon-triangle-color);
            }
            @else {
                @if $menujs-icon-image-closed != "" {
                    background-image: url($menujs-icon-image-closed);
                    background-size: $menujs-icon-width $menujs-icon-height;
                }

                @if $menujs-icon-image-closed-hires != "" {
                    @include pointbreak(hires) {
                        background-image: url($menujs-icon-image-closed-hires);
                    }
                }
            }
        }
    }

    &.#{$menujs-vendor}-has-group > div > a:hover > i {
        @if $menujs-use-group-triangle == true {
            @include triangle("right", $menujs-icon-triangle-size, $menujs-icon-triangle-color);
        }
        @else {
            @if $menujs-icon-image-closed-hover != "" {
                background-image: url($menujs-icon-image-closed-hover);
            }

            @if $menujs-icon-image-closed-hover-hires != "" {
                @include pointbreak(hires) {
                    background-image: url($menujs-icon-image-closed-hover-hires);
                }
            }
        }
    }

    &.#{$menujs-vendor}-open > div > a {
        color: $menujs-item-open-color;
        background-color: $menujs-item-open-bg-color;
        box-shadow: $menujs-item-open-shadow;
        @include menujs-transition("all #{$menujs-item-transition-duration} #{$menujs-item-transition-function}");

        & > i {
            @if $menujs-use-group-triangle == true {
                @include triangle("left", $menujs-icon-triangle-size, $menujs-icon-triangle-color);
            }
            @else {
                @if $menujs-icon-image-opened != "" {
                    background-image: url($menujs-icon-image-opened);
                }

                @if $menujs-icon-image-opened-hires != "" {
                    @include pointbreak(hires) {
                        background-image: url($menujs-icon-image-opened-hires);
                    }
                }
            }
        }

        // &:active,
        &:focus,
        &:hover {
            // outline: none;
            color: $menujs-item-open-color-hover;
            background-color: $menujs-item-open-bg-color-hover;
            box-shadow: $menujs-item-open-shadow-hover;

            & > i {
                @if $menujs-use-group-triangle == true {
                    @include triangle("left", $menujs-icon-triangle-size, $menujs-icon-triangle-color-hover);
                }
                @else {
                    @if $menujs-icon-image-opened-hover != "" {
                        background-image: url($menujs-icon-image-opened-hover);
                    }

                    @if $menujs-icon-image-opened-hover-hires != "" {
                        @include pointbreak(hires) {
                            background-image: url($menujs-icon-image-opened-hover-hires);
                        }
                    }
                }
            }
        }

        &:focus {
            box-shadow: none;
        }
    }

    // Icons
    &.#{$menujs-vendor}-open.#{$menujs-vendor}-has-group > div > a {
        & > i {
            @if $menujs-use-group-triangle == true {
                @include triangle("left", $menujs-icon-triangle-size, $menujs-icon-triangle-color);
            }
            @else {
                @if $menujs-icon-image-opened != "" {
                    background-image: url($menujs-icon-image-opened);
                }

                @if $menujs-icon-image-opened-hires != "" {
                    @include pointbreak(hires) {
                        background-image: url($menujs-icon-image-opened-hires);
                    }
                }
            }
        }

        &:hover > i {
            @if $menujs-use-group-triangle == true {
                @include triangle("left", $menujs-icon-triangle-size, $menujs-icon-triangle-color-hover);
            }
            @else {
                @if $menujs-icon-image-opened-hover != "" {
                    background-image: url($menujs-icon-image-opened-hover);
                }

                @if $menujs-icon-image-opened-hover-hires != "" {
                    @include pointbreak(hires) {
                        background-image: url($menujs-icon-image-opened-hover-hires);
                    }
                }
            }
        }
    }
}

// Top-level items
#{$menujs-namespace} .#{$menujs-vendor}-item-level-1 {
    display: table-cell;
    border: $menujs-item-border;
    border-left: none;

    &:first-child {
        border-left: $menujs-item-border;
    }

    // Links
    &.#{$menujs-vendor}-has-group > div > a {
        // Make the line-height big enough to make the items fill the menu's height
        line-height: $menujs-menu-height - $menujs-item-padding-top - $menujs-item-padding-bottom;
        padding-right: $menujs-item-padding-right-with-triangle;
    }

    // Icons
    &.#{$menujs-vendor}-has-group > div > a > i {
        @if $menujs-use-group-triangle == true {
            //top: (($menujs-menu-height / 2) - ($menujs-icon-triangle-size / 2)); // Not sure why top-level items need a different offset...
            top: ($menujs-menu-height / 2) + $menujs-item-padding-vertical - $menujs-icon-triangle-size -1;
            right: $menujs-item-padding-right - ($menujs-icon-triangle-size / 2);

            @include triangle("down", $menujs-icon-triangle-size, $menujs-icon-triangle-color);
        }
        @else {
            @if $menujs-icon-image-closed-top-level != "" {
                background-image: url($menujs-icon-image-closed-top-level);
            }

            @if $menujs-icon-image-closed-top-level-hires != "" {
                @include pointbreak(hires) {
                    background-image: url($menujs-icon-image-closed-top-level-hires);
                }
            }
        }
    }

    &.#{$menujs-vendor}-has-group > div > a:hover > i {
        @if $menujs-use-group-triangle == true {
            @include triangle("down", $menujs-icon-triangle-size, $menujs-icon-triangle-color-hover);
        }
        @else {
            @if $menujs-icon-image-closed-top-level-hover != "" {
                background-image: url($menujs-icon-image-closed-top-level-hover);
            }

            @if $menujs-icon-image-closed-top-level-hover-hires != "" {
                @include pointbreak(hires) {
                    background-image: url($menujs-icon-image-closed-top-level-hover-hires);
                }
            }
        }
    }

    &.#{$menujs-vendor}-has-group.#{$menujs-vendor}-open > div > a > i {
        @if $menujs-use-group-triangle == true {
            @include triangle("up", $menujs-icon-triangle-size, $menujs-icon-triangle-color);
        }
        @else {
            @if $menujs-icon-image-opened-top-level != "" {
                background-image: url($menujs-icon-image-opened-top-level);
            }

            @if $menujs-icon-image-opened-top-level-hires != "" {
                @include pointbreak(hires) {
                    background-image: url($menujs-icon-image-opened-top-level-hires);
                }
            }
        }
    }

    &.#{$menujs-vendor}-has-group.#{$menujs-vendor}-open > div > a:hover > i {
        @if $menujs-use-group-triangle == true {
            @include triangle("up", $menujs-icon-triangle-size, $menujs-icon-triangle-color-hover);
        }
        @else {
            @if $menujs-icon-image-opened-top-level-hover != "" {
                background-image: url($menujs-icon-image-opened-top-level-hover);
            }

            @if $menujs-icon-image-opened-top-level-hover-hires != "" {
                @include pointbreak(hires) {
                    background-image: url($menujs-icon-image-opened-top-level-hover-hires);
                }
            }
        }
    }

    // Items that wrap over more than one line
    &.#{$menujs-vendor}-item-row-below {
        border-top: none;
    }

    &.#{$menujs-vendor}-item-row-begin {

        @if $menujs-item-border-radius != 0 {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
    }

    &.#{$menujs-vendor}-item-row-end {
        border-right: $menujs-item-border;
    }
}

// Cannot use `table` for menus with natural width or containing all fixed-width items because the items may shrink/stretch to the wrong width
#{$menujs-namespace}.#{$menujs-vendor}-fixed-width .#{$menujs-vendor}-item-level-1,
#{$menujs-namespace}.#{$menujs-vendor}-natural-width .#{$menujs-vendor}-item-level-1 {
    display: inline-block;
    @include clearfix;
    float: left; // Seems to be necessary to keep the tops of the items aligned, otherwise the first item is higher
}

#{$menujs-namespace} .#{$menujs-vendor}-has-group,
#{$menujs-namespace} .#{$menujs-vendor}-item-wrapper {
    position: relative;
}

// Dividers
#{$menujs-namespace} .#{$menujs-vendor}-item-divider {
    background-color: darken($menujs-item-bg-color, 10%);
    cursor: default;

    & > div > a {
        padding-right: $menujs-item-padding-right; // No room for an icon

        // Retain styles with hover/focus
        &,
        &:hover,
        &:active,
        &:focus {
            color: $menujs-item-text-color;
            background-color: $menujs-item-bg-color;
        }
    }

    &.#{$menujs-vendor}-item-divider-blank {
        // Shorten the item
        line-height: 1px;
        font-size: 1px;

        & > div > a {
            padding-top: $menujs-item-padding-top / 2;
            padding-bottom: $menujs-item-padding-bottom / 2;
        }
    }

    // Line divider
    &.#{$menujs-vendor}-item-divider-line {
        // Remove border from this item
        border-top: none;

        // Remove top border from the next item
        & + .#{$menujs-vendor}-item {
            border-top: none;
        }

        // Draw the line
        .#{$menujs-vendor}-item-label span {
            display: block;
            border-top: $menujs-item-border-width $menujs-item-border-style $menujs-item-divider-line-rule-border-color;
        }
    }
}

// Groups

#{$menujs-namespace} .#{$menujs-vendor}-group {
    // By default, position a group directly under the parent item and align it to the left
    position: absolute;
    top: 100%;
    left: -1 * $menujs-item-border-width; // Pull right the same number of pixels as the border width
    z-index: $menujs-zindex-group;

    @if $menujs-group-min-width != "" {
        min-width: $menujs-group-min-width;
    }
    @if $menujs-group-width != "" {
        width: $menujs-group-width;
    }

    box-shadow: 1px 2px $menujs-group-shadow-blur $menujs-group-shadow-spread $menujs-group-shadow-color, -1px -1px $menujs-group-shadow-blur $menujs-group-shadow-spread $menujs-group-shadow-color;

    &.#{$menujs-vendor}-group-level-1 {
        // Same as other groups, but without a shadow along the top which would overlap the parent item awkwardly
        box-shadow: 1px 2px $menujs-group-shadow-blur $menujs-group-shadow-spread $menujs-group-shadow-color;
    }

    // Position a group to the right of the parent item
    &.#{$menujs-vendor}-pull-right {
        top: -1 * $menujs-item-border-width;
        left: 100%;
    }

    // Position a group to the left of the parent item
    &.#{$menujs-vendor}-pull-left {
        top: -1 * $menujs-item-border-width;
        left: -101%;
    }

    // Right-align a group to its parent item
    &.#{$menujs-vendor}-align-to-right {
        right: -1 * $menujs-item-border-width;
        left: auto;
    }
}

// Group borders
#{$menujs-namespace} .#{$menujs-vendor}-group {
    border: $menujs-group-border;

    // Hide the border on the side of the group that butts up against its parent

    &.#{$menujs-vendor}-group-level-1 {
        border-top: none;
    }

    &.#{$menujs-vendor}-pull-right {
        border-left: none;
    }

    &.#{$menujs-vendor}-pull-left {
        border-right: none;
    }
}

// Vertical
@if $menujs-include-vertical-menus == true {
    #{$menujs-namespace}.#{$menujs-vendor}-vertical {
        display: block;
        background-color: $menujs-item-bg-color;

        .#{$menujs-vendor}-group {
            position: relative; // static?
            top: 0;
            left: 0;

            .#{$menujs-vendor}-item {
                color: $menujs-item-vertical-color;
                background-color: $menujs-item-vertical-bg-color;
            }

            &.#{$menujs-vendor}-pull-right {
                position: absolute;
                left: 100%;
            }
        }

        .#{$menujs-vendor}-item-level-1 {
            display: block;
            height: 100%; // Forces the background color to extend to the sub-group's bottom margin
            border-right: $menujs-item-border;
            border-bottom: none;

            &:last-child {
                border-bottom: $menujs-item-border;
            }

            &,
            &:hover,
            // &:active,
            &:focus {
                background-color: rgba(255, 255, 255, 0.4);
            }

            & > div > a {
                // Normally background color is set on the item's `<li>`, but for the top level of vertical menus only the `<a>` has that color so the rest of the item (i.e. the group within) can have its own color
                background-color: $menujs-item-bg-color;

                &:hover {
                    background-color: $menujs-item-bg-color-hover;
                }

                & > .#{$menujs-vendor}-item-label {
                    // Force top-level labels to take up the full width so that their widths can be applied to child items by the plugin
                    display: block;
                }
            }

            &.#{$menujs-vendor}-open > div > a {
                color: $menujs-item-open-color-hover;
                background-color: $menujs-item-open-bg-color-hover;
            }
        }

        .#{$menujs-vendor}-group-level-1 {
            margin: $menujs-vertical-group-1-margin;

            // Expand/collapse animation
            // Don't enable GPU here because it leaves inconsistent gaps between items
            // Note that the transition property is `none` to prevent the CSS from actually transitioning the element. This allows the plugin to control the transition but still read the duration and timing function values from the CSS.
            @include menujs-transition("none #{$menujs-vertical-animation-duration} #{$menujs-vertical-animation-function}");

            .#{$menujs-vendor}-item-level-2 {
                background-color: rgba(255, 255, 255, 0.2);
                border-color: rgba(100, 100, 100, 0.3);

                &:hover {
                    background-color: $menujs-item-bg-color-hover;
                }
            }
        }

        // Clip text in second-level items to prevent wrapping
        .#{$menujs-vendor}-item-level-2 > div > a > .#{$menujs-vendor}-item-label {
            display: block;
            text-overflow: ellipsis;
            overflow: hidden;
        }
    }
}

// Border radii
@if $menujs-item-border-radius != 0 {
    #{$menujs-namespace} {
        border-radius: $menujs-item-border-radius;
        background-clip: padding-box;
    }

    #{$menujs-namespace} .#{$menujs-vendor}-item-level-1 {
        &:first-child,
        &:first-child > div,
        &:first-child > div > a {
            border-top-left-radius: $menujs-item-border-radius;
            border-bottom-left-radius: $menujs-item-border-radius;
            background-clip: padding-box;
        }

        &:last-child,
        &:last-child > div,
        &:last-child > div > a {
            border-top-right-radius: $menujs-item-border-radius;
            border-bottom-right-radius: $menujs-item-border-radius;
            background-clip: padding-box;
        }
    }

    @if $menujs-include-vertical-menus == true {
        #{$menujs-namespace}.#{$menujs-vendor}-vertical .#{$menujs-vendor}-item-level-1 {
            &:first-child,
            &:first-child > div > a {
                border-top-left-radius: $menujs-item-border-radius;
                border-top-right-radius: $menujs-item-border-radius;
                border-bottom-left-radius: 0;
                background-clip: padding-box;
            }

            &:last-child,
            &:last-child > div > a {
                border-bottom-left-radius: $menujs-item-border-radius;
                border-bottom-right-radius: $menujs-item-border-radius;
                border-top-right-radius: 0;
                background-clip: padding-box;
            }

            &.#{$menujs-vendor}-open {
                &:last-child {
                    border-bottom-left-radius: $menujs-item-border-radius;
                    border-bottom-right-radius: $menujs-item-border-radius;
                    background-clip: padding-box;

                    & > div > a {
                        border-bottom-left-radius: 0;
                        border-bottom-right-radius: 0;
                    }
                }
            }
        }
    }
}

#{$menujs-namespace} .#{$menujs-vendor}-item-link {
    // Maintain the same style as non-links
    &,
    &:hover,
    &:active,
    &:focus {
        color: $menujs-item-text-color;
        text-decoration: none;
    }
}

#{$menujs-namespace} .#{$menujs-vendor}-item-label {
    @include hyphenation();
}

#{$menujs-namespace} .#{$menujs-vendor}-hidden {
    display: none !important;
}


// Animations

// Fade in
@-webkit-keyframes #{$menujs-fade-in-animation-name} {
    from { opacity: 0; }
      to { opacity: 1; }
}

@keyframes #{$menujs-fade-in-animation-name} {
    from { opacity: 0; }
      to { opacity: 1; }
}

#{$menujs-namespace} .#{$menujs-vendor}-fade-in {
    @include animation(#{$menujs-fade-in-animation-name} $menujs-fade-in-animation-duration);
}

// Fade out
@-webkit-keyframes #{$menujs-fade-out-animation-name} {
    from { opacity: 1; }
      to { opacity: 0; }
}

@keyframes #{$menujs-fade-out-animation-name} {
    from { opacity: 1; }
      to { opacity: 0; }
}

#{$menujs-namespace} .#{$menujs-vendor}-fade-out {
    @include animation(#{$menujs-fade-out-animation-name} $menujs-fade-out-animation-duration);
}
